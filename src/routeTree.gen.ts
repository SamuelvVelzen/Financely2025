/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as appRouteRouteImport } from './routes/(app)/route'
import { Route as appIndexRouteImport } from './routes/(app)/index'
import { Route as appLabelsRouteImport } from './routes/(app)/labels'
import { Route as appIncomesRouteImport } from './routes/(app)/incomes'
import { Route as appExpensesRouteImport } from './routes/(app)/expenses'
import { Route as appAccountRouteImport } from './routes/(app)/account'

const appRouteRoute = appRouteRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const appIndexRoute = appIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appRouteRoute,
} as any)
const appLabelsRoute = appLabelsRouteImport.update({
  id: '/labels',
  path: '/labels',
  getParentRoute: () => appRouteRoute,
} as any)
const appIncomesRoute = appIncomesRouteImport.update({
  id: '/incomes',
  path: '/incomes',
  getParentRoute: () => appRouteRoute,
} as any)
const appExpensesRoute = appExpensesRouteImport.update({
  id: '/expenses',
  path: '/expenses',
  getParentRoute: () => appRouteRoute,
} as any)
const appAccountRoute = appAccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => appRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/account': typeof appAccountRoute
  '/expenses': typeof appExpensesRoute
  '/incomes': typeof appIncomesRoute
  '/labels': typeof appLabelsRoute
  '/': typeof appIndexRoute
}
export interface FileRoutesByTo {
  '/account': typeof appAccountRoute
  '/expenses': typeof appExpensesRoute
  '/incomes': typeof appIncomesRoute
  '/labels': typeof appLabelsRoute
  '/': typeof appIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(app)': typeof appRouteRouteWithChildren
  '/(app)/account': typeof appAccountRoute
  '/(app)/expenses': typeof appExpensesRoute
  '/(app)/incomes': typeof appIncomesRoute
  '/(app)/labels': typeof appLabelsRoute
  '/(app)/': typeof appIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/account' | '/expenses' | '/incomes' | '/labels' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/account' | '/expenses' | '/incomes' | '/labels' | '/'
  id:
    | '__root__'
    | '/(app)'
    | '/(app)/account'
    | '/(app)/expenses'
    | '/(app)/incomes'
    | '/(app)/labels'
    | '/(app)/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  appRouteRoute: typeof appRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(app)': {
      id: '/(app)'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof appRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/': {
      id: '/(app)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/labels': {
      id: '/(app)/labels'
      path: '/labels'
      fullPath: '/labels'
      preLoaderRoute: typeof appLabelsRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/incomes': {
      id: '/(app)/incomes'
      path: '/incomes'
      fullPath: '/incomes'
      preLoaderRoute: typeof appIncomesRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/expenses': {
      id: '/(app)/expenses'
      path: '/expenses'
      fullPath: '/expenses'
      preLoaderRoute: typeof appExpensesRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/account': {
      id: '/(app)/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof appAccountRouteImport
      parentRoute: typeof appRouteRoute
    }
  }
}

interface appRouteRouteChildren {
  appAccountRoute: typeof appAccountRoute
  appExpensesRoute: typeof appExpensesRoute
  appIncomesRoute: typeof appIncomesRoute
  appLabelsRoute: typeof appLabelsRoute
  appIndexRoute: typeof appIndexRoute
}

const appRouteRouteChildren: appRouteRouteChildren = {
  appAccountRoute: appAccountRoute,
  appExpensesRoute: appExpensesRoute,
  appIncomesRoute: appIncomesRoute,
  appLabelsRoute: appLabelsRoute,
  appIndexRoute: appIndexRoute,
}

const appRouteRouteWithChildren = appRouteRoute._addFileChildren(
  appRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  appRouteRoute: appRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
